
name: Build Release Binaries

on:
  # Trigger on new release tags
  push:
    tags:
      - 'v*'
  # Allow manual trigger
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            artifact_name: nyx
            asset_name: nyx-linux-x86_64
          
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            artifact_name: nyx
            asset_name: nyx-linux-aarch64
          
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: nyx.exe
            asset_name: nyx-windows-x86_64.exe
          
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: nyx
            asset_name: nyx-macos-x86_64
          
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: nyx
            asset_name: nyx-macos-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV

      - name: Install musl-tools (Linux x86_64)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools
      - name: Install macFUSE (macOS only)
        if: runner.os == 'macOS'
        run: |
          brew install --cask macfuse
          brew install pkg-config

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Check macOS dependencies
        if: matrix.os == 'macos-latest'
        run: |
          echo "Dependencies for ${{ matrix.asset_name }}:"
          otool -L target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

      - name: Create release archive
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          else
            tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          fi

      - name: Upload release assets
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ matrix.asset_name }}.*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


